rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // secure by default
    match /{document=**} {
      allow read, write: if false;
    }

    // helper functions
    function verifyUser(documentUserId) {
      return request.auth != null &&
        request.auth.uid == documentUserId;
    }

    function verifyFields(required, optional) {
      let allAllowedFields = required.concat(optional);

      return request.resource.data.keys().hasAll(required) &&
        request.resource.data.keys().hasOnly(allAllowedFields);
    }

    // rules
    match /users-public/{userId} {
      allow read: if true;
      allow create: if
        verifyUser(userId) &&
        verifyFields(["firstName", "lastName"], ["profilePicture"]) &&
        request.resource.data["firstName"] is string && // TODO: validate field contents with regex
        request.resource.data["lastName"] is string &&
        request.resource.data["profilePicture"] is string;
    }

    match /users-private/{userId} {
      allow read: if verifyUser(userId);
    }

    match /listings/{listingId} {
      allow read: if resource.data["visibility"] == "public" ||
        request.auth.uid == resource.data["owner"]["uid"];
      allow create: if request.auth != null; // TODO: validate data
      allow update: if
        request.auth != null &&
        request.auth.uid == resource.data["owner"]["uid"] &&
        !request.resource.data.keys().hasAny(["owner", "createdAt"]); // user cannot update these fields
    }

    match /chat-rooms/{chatId} {
      allow read: if
        request.auth != null &&
        request.auth.uid in resource.data["members"]; // TODO: confirm if applies to subcollection
      allow create: if
        request.auth != null &&
        request.resource.data.keys().hasAll(["members"]) &&
        request.resource.data["members"] is list &&
        request.resource.data["members"].size() >= 2 &&
        request.auth.uid in request.resource.data["members"];

      match /messages/{msgId} {
        allow create: if
          request.auth.uid in get(/databases/$(database)/documents/chat-rooms/$(chatId)).data["members"] &&
          request.resource.data.keys().hasAll(["uid", "text", "createdAt"]) &&
          request.resource.data["uid"] == request.auth.uid &&
          request.resource.data["createdAt"] is timestamp &&
          request.resource.data["createdAt"] == request.time;
      }
    }
  }
}
